macro = ; 

var : borrame esta ;
loop 0 200
	set borrame getrandom[0 ntax] ;
	set esta getrandom[0 nchar] ;
	xread ='esta' 'borrame' ? ;
	stop

var - ; 
xread*;

/* ====================================================================================================== *\
|   Isolate the effect of dependence from that of missind data												|
|																											|
|	The procedure consists of iteratively replacing missing data and polymorphisms.							|
|	by one of the observed states. Cell replacement is done by any of the states in the polymorphic cell	|
|	or any state within the character in the case of missing entries										|
|																											|
|	The results are summarised in strict and majority consensus												|
\* ======================================================================================================= */

var :
cell_visited[2]		/* matrix cell visited */
cell_state			/* state(s) in the cell, as bit */
cell_state_bitn 	/* number of bits "on" in the visited cell */ 
threshold			/* minimum proportion of cells to visit and modify */
cells_tovisit		/* cells to visit according to threshold */
increase_th			/* factor increasing the number of cells visited at each iteration */
replacement_value	/* randomly selected state */
itcounter			/* how many cells were visited and replaced? */
;


set threshold 0.25 ;

set cells_tovisit ( ('threshold' * ( (nchar+1) * (ntax+1) ) ) / 1.0 ) ;

set increase_th 'cells_tovisit' ; /* in each iteration, number of visited cells will increase until no one is left */

set itcounter 0; 
quote itcounter:'itcounter' increase_th:'increase_th' cells_tovisit:'cells_tovisit' ;

loop =iter 1 1000
		set cell_visited[0] getrandom[0 (ntax)]	;
		set cell_visited[1] getrandom[0 (nchar)];
			/* quote Taxon: 'cell_visited[0]' Character: 'cell_visited[1]'; */
			
		set cell_state states['cell_visited[1]' 'cell_visited[0]'] ;

			/* checking if it is a single observation or a missing entry */
			if('cell_state' == missing)
				set replacement_value getrandom[0 (maxstate['cell_visited[1]'])] ;
				xread ='cell_visited[1]' 'cell_visited[0]' 'replacement_value' ;
				set itcounter ++ ;
				end 
		
			if('itcounter' == 'increase_th')
				set increase_th += 'cells_tovisit' ;
				quote modified 'itcounter' (next round: 'increase_th') ;
				end
					
			if('itcounter' == ( (nchar+1) * (ntax+1) ) ) 
				quote IGUAL;
				endloop
				end
	stop

xread*;
p/;